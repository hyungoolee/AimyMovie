@{
    ViewBag.Title = "Aimy's Movies";
}

@(Html.Kendo().Grid<AimyMovieStore.Models.Movie>()
      .Name("grid")
      .Columns(columns =>
      {
          columns.Template(@<text></text>).ClientTemplate("<input type='checkbox' class='checkbox' value='#= Id #' />");
          columns.Bound(c => c.Name);
          columns.Bound(c => c.Genre).Filterable(ft => ft.Multi(true).Search(true));
          //columns.Bound(c => c.ReleaseDate).Width(120).Format("{0:MM/dd/yyyy}");
          columns.Bound(c => c.Price).Format("{0:c2}");
          columns.Command(command => { command.Edit(); command.Destroy(); }).Width(180);
      })
      .ToolBar(toolbar =>
      {
          toolbar.Create().Text("ADD NEW MOVIE");
          toolbar.Custom().Text("SAVE MY SELECTION").HtmlAttributes(new {id="addToCart"});
          toolbar.Custom().Text("CHECK OUT").Action("Index", "Checkout");
      })
      .Editable(editable => editable.Mode(GridEditMode.InLine))
      .Pageable()
      .Navigatable()
      .Sortable(sortable =>
      {
          sortable.SortMode(GridSortMode.SingleColumn);
      })
      .Filterable()
      .Scrollable()
      .HtmlAttributes(new { style = "height:480px;" })
      .DataSource(dataSource => dataSource
          .Ajax()
          .Model(model => model.Id(p => p.Id))
          .Read(read => read.Action("Movies_Read", "Movies"))
          .Create(create => create.Action("Movies_Create", "Movies"))
          .Update(update => update.Action("Movies_Update", "Movies"))
          .Destroy(destroy => destroy.Action("Movies_Destroy", "Movies"))
      )
)

<script>
    $(document).ready(function () {
        //bind click event to the checkbox
        $("#grid").on("change", ":checkbox", function (e) {
            var checkbox = e.currentTarget;
            var row = $(checkbox).closest("tr");
            checkedIds[checkbox.value] = checkbox.checked;

            //var grid = $("#grid").data("kendoGrid");
            //var dataItem = grid.dataItem(row);
            //checkedIds[dataItem.Id] = checkbox.checked;

            // toggle selected state of the parent table row
            row.toggleClass("k-state-selected", checkbox.checked);
        });

        $("#addToCart").on("click", function (event) {
            event.preventDefault();
            var selected = [];
            for (var i in checkedIds) {
                if (checkedIds[i]) {
                    selected.push(i);
                }
            }

            if (selected.length === 0) {
                $.confirm({
                    title: "No movies were selected!",
                    content: "Please select at least one movie.",
                    buttons: {
                        Ok: function () {}
                    }
                });
            } else {
                $.get("/Movies/Cart",
                {
                    movieIds: JSON.stringify(selected)
                }, function () {
                    $.confirm({
                        title: "Successfully added to your cart!",
                        content: "Do you want to checkout now?",
                        buttons: {
                            Yes: function() {
                                window.location.replace("/Checkout/Index");
                            },
                            No: function(){}
                        }
                    });
                });
            }
        });
    });

    var checkedIds = {};

    //on dataBound event restore previous selected rows:
    function onDataBound(e) {
        var view = this.dataSource.view();
        for (var i = 0; i < view.length; i++) {
            if (checkedIds[view[i].id]) {
                this.tbody.find("tr[data-uid='" + view[i].uid + "']")
                    .addClass("k-state-selected")
                    .find(".checkbox")
                    .attr("checked", "checked");
            }
        }
    }
</script>